name: Test .NET Tool

on:
  pull_request:
    branches:
      - main
      - user/asklar/dotnet
    paths:
      - 'dotnet/**'
      - 'examples/**'
      - '.github/workflows/test-dotnet.yml'
  push:
    branches:
      - main
      - user/asklar/dotnet
    paths:
      - 'dotnet/**'
      - 'examples/**'
      - '.github/workflows/test-dotnet.yml'

permissions:
  contents: read

jobs:
  test-dotnet:
    name: Test .NET Tool
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: Setup .NET
        uses: actions/setup-dotnet@3e891b0cb619bf60e2c25674b222b8940e2c1c25 # v4.1.0
        with:
          dotnet-version: '8.0.x'
      
      - name: Setup Node.js (for examples)
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '20.x'
      
      # Step a) Run .NET tests
      - name: Run .NET Tests
        shell: bash
        run: |
          cd dotnet
          dotnet restore
          dotnet build -c Release
          dotnet test -c Release --no-build --verbosity normal
      
      # Step b) Validate basic CLI functionality
      - name: Test CLI - Help Command
        shell: bash
        run: |
          cd dotnet
          dotnet run --project mcpb/mcpb.csproj -- --help
      
      - name: Test CLI - Version Command
        shell: bash
        run: |
          cd dotnet
          dotnet run --project mcpb/mcpb.csproj -- --version
      
      # Step c) Test with examples - hello-world-node
      - name: Setup hello-world-node Example
        shell: bash
        run: |
          cd examples/hello-world-node
          npm install
      
      - name: Test CLI - Validate hello-world-node Manifest
        shell: bash
        run: |
          cd dotnet
          dotnet run --project mcpb/mcpb.csproj -- validate ../examples/hello-world-node/manifest.json
      
      - name: Test CLI - Pack hello-world-node (with update and output)
        shell: bash
        run: |
          cd examples/hello-world-node
          echo "=== Original Manifest ==="
          cat manifest.json
          echo ""
          echo "=== Running mcpb pack --update ==="
          dotnet run --project ../../dotnet/mcpb/mcpb.csproj -- pack . hello-world-test.mcpb --update
          echo ""
          echo "=== Updated Manifest with _meta ==="
          cat manifest.json
          echo ""
          echo "=== Verifying _meta field was added ==="
          if grep -q '"_meta"' manifest.json; then
            echo "✓ _meta field found in manifest"
          else
            echo "✗ _meta field NOT found in manifest"
            exit 1
          fi
          echo ""
          echo "=== Verifying static_responses ==="
          if grep -q '"static_responses"' manifest.json; then
            echo "✓ static_responses found in manifest"
          else
            echo "✗ static_responses NOT found in manifest"
            exit 1
          fi
      
      # Test with file-system-node example
      - name: Setup file-system-node Example
        shell: bash
        run: |
          cd examples/file-system-node
          npm install
      
      - name: Test CLI - Validate file-system-node Manifest
        shell: bash
        run: |
          cd dotnet
          dotnet run --project mcpb/mcpb.csproj -- validate ../examples/file-system-node/manifest.json
      
      - name: Test CLI - Pack file-system-node (no update)
        shell: bash
        run: |
          cd examples/file-system-node
          echo "=== Testing pack without --update ==="
          dotnet run --project ../../dotnet/mcpb/mcpb.csproj -- pack . file-system-test.mcpb --force || true
          echo ""
          echo "=== Manifest (should be unchanged) ==="
          cat manifest.json
      
      # Test init command
      - name: Test CLI - Init Command
        shell: bash
        run: |
          cd dotnet
          mkdir -p ../test-init
          cd ../test-init
          echo "=== Testing mcpb init ==="
          dotnet run --project ../dotnet/mcpb/mcpb.csproj -- init --server-type node --entry-point server/index.js
          echo ""
          echo "=== Generated Manifest ==="
          cat manifest.json
          echo ""
          echo "=== Verifying manifest was created ==="
          if [ -f manifest.json ]; then
            echo "✓ manifest.json created"
          else
            echo "✗ manifest.json NOT created"
            exit 1
          fi
      
      # Clean up test artifacts
      - name: Cleanup
        if: always()
        shell: bash
        run: |
          cd examples/hello-world-node
          git checkout manifest.json || true
          rm -f hello-world-test.mcpb || true
          cd ../file-system-node
          git checkout manifest.json || true
          rm -f file-system-test.mcpb || true
          cd ../../
          rm -rf test-init || true
